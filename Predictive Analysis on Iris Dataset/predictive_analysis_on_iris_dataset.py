# -*- coding: utf-8 -*-
"""Predictive Analysis on Iris Dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HQLB_CMHdMXLekL7SK8l35iDLP2FlkqI

Using the given data to predict the species of flower

based on :https://youtu.be/rdaG53khzv0?si=yJE4w1ByxfdmnFv-
"""

from sklearn.datasets import load_iris

iris_data=load_iris()

print(iris_data.DESCR)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
import seaborn as sns

df=load_iris()
df

df.keys()

print(df["DESCR"])

df["feature_names"]

df["target_names"]

sns.set()

df['data']

df1=pd.DataFrame(df['data'],columns=df["feature_names"])
df1

df1["target"]=df["target"]

df1.head()

df1.describe()

df1["target"]

df1["sepal width (cm)"].hist()

col="petal length (cm)"
df1[col].hist()
plt.suptitle(col)
plt.show()

col="sepal length (cm)"
df1[col].hist()
plt.suptitle(col)
plt.show()

df["target_names"]

df1["target_name"]=df1["target"].map({0:"setosa",1:"versicolor",2:"virginica"})

col="petal width (cm)"
sns.relplot(x=col,y="target",hue="target_name",data=df1)
plt.suptitle(col,y=1.03)
plt.show()

"""Exploratory Data Analysis"""

sns.pairplot(df1,hue="target_name")

"""From the graphs, concluded that Setosa can be easily identified since they are clustered apart from other two species.
Versicolor and virginica overlaps in data sometimes making them hard to differentiate
"""

from sklearn.model_selection import train_test_split

df1_train,df1_test=train_test_split(df1,test_size=0.2)

df1_train.shape

df1_test.shape

df1_train.head()

x_train=df1_train.drop(columns=["target","target_name"]).values
y_train=df1_train["target"].values

"""Manual modelling"""

def single_feature_prediction(petal_length):
  """predicts the iris species given the petal length"""
  if petal_length<2.5:
    return 0
  elif petal_length<4.8:
    return 1
  else:
    return 2

df1_train.columns

manual_y_predictions=np.array([single_feature_prediction(val) for val in x_train[:, 2]])

np.mean(manual_y_predictions==y_train)

"""Manual model accuracy : 94.166%

Modeling using Logistic Regression
"""

from sklearn.linear_model import LogisticRegression

model = LogisticRegression(max_iter=400,C=10)

xt,xv,yt,yv=train_test_split(x_train,y_train,test_size=0.25)

model.fit(xt,yt)

y_pred=model.predict(xv)

np.mean(y_pred==yv)

model.score(xv,yv)

from sklearn.model_selection import cross_val_score, cross_val_predict

np.mean(cross_val_score(model,x_train,y_train,cv=5,scoring="accuracy"))

y_pred=cross_val_predict(model,x_train,y_train,cv=5)
y_pred==y_train

pred_correct=y_pred==y_train

not_pred_correct=~pred_correct

df1_pred=df1_train.copy()

df1_pred["prediction check"]=pred_correct

df1_pred["prediction"]=y_pred

df1_pred["prediction label"]=df1_pred["prediction"].map({0:"setosa",1:"versicolor",2:"virginica"})

df1_pred.head()

sns.scatterplot(x="petal length (cm)",y="petal width (cm)",hue="prediction label",data=df1_pred)

sns.scatterplot(x="petal length (cm)",y="petal width (cm)",hue="target_name",data=df1_pred)

sns.scatterplot(x="petal length (cm)",y="petal width (cm)",hue="prediction check",data=df1_pred)

"""Conclusion:

*  The model achived an accuracy of 96.67 percent
*   From the "prediction check" plot, it is visually identified that only 3 of the predictions were false



"""